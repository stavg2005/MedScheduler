using System;
using System.Collections.Generic;
using System.Linq;
using ClassLibrary1;
using DB;


// Assuming all models (Doctor, Patient, etc.) and Enums are in the Models namespace
using Models;


namespace MedScheduler // Or your appropriate namespace
{
    /// <summary>
    /// Manages the application's core data (doctors, patients, etc.)
    /// and provides access to it. Can initialize with generated sample data.
    /// </summary>
    public class DataManager
    {
        // Store the generated data
        private List<Doctor> doctors;
        private List<Patient> patients;
        private List<MedicalProcedure> procedures;
        private List<OperatingRoom> operatingRooms;

        // Store the result from a scheduler run
        private Schedule currentDoctorSchedule; // Stores result from DoctorScheduler (GA)
        // Add storage for surgery results if needed, e.g., List<Patient> scheduledSurgeries

        public DataManager()
        {
            InitializeDataWithGenerator(); // Initialize with generated data by default
        }

        /// <summary>
        /// Initializes the DataManager with correlated sample data using the enhanced DataGenerator.
        /// </summary>
        private void InitializeDataWithGenerator()
        {
            DataGenerator generator = new DataGenerator();
            Console.WriteLine("Initializing data with Enhanced DataGenerator...");

            // 1. Generate Medical Procedures FIRST (as others depend on it)
            procedures = generator.GenerateProcedures(50); // Generate 30 procedures
            Console.WriteLine($"Generated {procedures.Count} medical procedures");
            if (procedures == null || !procedures.Any())
            {
                Console.WriteLine("WARNING: No procedures generated. Subsequent generation might be incomplete.");
                procedures = new List<MedicalProcedure>(); // Ensure list exists
            }


            // 2. Generate Doctors (including Surgeons) - Requires Procedures
            doctors = generator.GenerateDoctors(70, procedures); // Generate 50 doctors/surgeons
            Console.WriteLine($"Generated {doctors.Count} doctors ({doctors.OfType<Surgeon>().Count()} surgeons)");
            if (doctors == null || !doctors.Any())
            {
                Console.WriteLine("WARNING: No doctors generated. Subsequent generation might be incomplete.");
                doctors = new List<Doctor>(); // Ensure list exists
            }

            // 3. Generate Operating Rooms - Requires Procedures (for surgical specs)
            operatingRooms = generator.GenerateOperatingRooms(30); // Generate 10 ORs
            Console.WriteLine($"Generated {operatingRooms.Count} operating rooms");
            if (operatingRooms == null) operatingRooms = new List<OperatingRoom>(); // Ensure list exists


            // 4. Generate Patients - Requires Doctors and Procedures
            patients = generator.GeneratePatients(200, doctors, procedures); // Generate 200 patients
            Console.WriteLine($"Generated {patients.Count} patients ({patients.Count(p => p.NeedsSurgery)} need surgery)");
            if (patients == null) patients = new List<Patient>(); // Ensure list exists


            // Initialize schedule field to null - Schedule should be generated by the algorithms
            currentDoctorSchedule = null;

            Console.WriteLine("Data generation complete.");
            SqlScriptGenerator scriptGenerator = new SqlScriptGenerator();
            string scriptFilePath = "C:\\Users\\Stav\\Documents\\sqlScripts\\medscheduler_data.sql"; // Choose path
            scriptGenerator.GenerateFullScript(scriptFilePath, doctors, patients, procedures, operatingRooms);
        }

        // --- Methods to Access Data ---

        public List<Doctor> GetDoctors()
        {
            return doctors ?? (doctors = new List<Doctor>());
        }

        public List<Patient> GetPatients()
        {
            return patients ?? (patients = new List<Patient>());
        }

        public List<MedicalProcedure> GetProcedures()
        {
            return procedures ?? (procedures = new List<MedicalProcedure>());
        }

        public List<OperatingRoom> GetOperatingRooms()
        {
            return operatingRooms ?? (operatingRooms = new List<OperatingRoom>());
        }

        // --- Methods to Manage Schedule Results ---

        public Schedule GetCurrentDoctorSchedule()
        {
            return currentDoctorSchedule;
        }

        public void SetCurrentDoctorSchedule(Schedule schedule)
        {
            currentDoctorSchedule = schedule;
            // Optional: Update Patient.AssignedDoctorId based on this schedule
            // (Consider if this is the right place vs. in the Orchestrator)
        }

        // Add methods for surgery results if needed

        // --- Optional: Methods to Add/Remove/Update data ---
        // public void AddDoctor(Doctor doctor) { doctors?.Add(doctor); }
        // public void AddPatient(Patient patient) { patients?.Add(patient); }
    }
}
