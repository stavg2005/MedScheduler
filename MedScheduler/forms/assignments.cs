using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Windows.Forms;
using Models; // Assuming Doctor, Patient, Schedule models are here
using DB;    // Assuming DataManager and DataSingelton are here

namespace MedScheduler.forms
{
    public partial class assignment : UserControl
    {
        // Use DataSingelton for primary data source access
        // private readonly DataManager dataManager = new DataManager(); // Keep if needed for other operations, otherwise remove if unused

        private Schedule currentSchedule; // This will be set by UpdateSchedule()

        // UI Elements (declarations remain the same)
        private ComboBox departmentComboBox;
        private Button graphicalViewButton;
        private Button tableViewButton;
        private FlowLayoutPanel doctorCardsPanel;
        private Panel metricsPanel;
        private Label totalPatientsLabel;
        private Label totalDoctorsLabel;
        private Label assignedPatientsLabel;
        private Label specializationMatchLabel;

        // Pagination (declarations remain the same)
        private int currentPage = 1;
        private int doctorsPerPage = 5; // Adjust as needed
        private int totalPages = 1;
        private Button prevButton;
        private Button nextButton;
        private List<Button> pageButtons = new List<Button>();
        private Panel paginationButtonPanel; // Panel to hold the numeric buttons for easier management

        // Data Lists - Will be loaded from DataSingelton
        private List<Doctor> doctors = new List<Doctor>();
        private List<Patient> patients = new List<Patient>();

        // Current display settings
        private string selectedDepartment = "All Departments";
        private bool graphicalView = true;

        public assignment()
        {
            // Standard WinForms initialization (can be empty if not using designer)
            InitializeComponent();
            // Initialize custom UI elements programmatically
            InitializeCustomComponents();

            // Load initial doctor/patient lists (but not schedule yet)
            // Display will be empty until UpdateSchedule is called
            LoadInitialData();
        }

        // Standard InitializeComponent (generated by designer or basic setup)
        private void InitializeComponent()
        {
            this.SuspendLayout();
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F); // Example dimensions
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(236)))), ((int)(((byte)(240)))), ((int)(((byte)(241)))));
            this.Name = "AssignmentsPanel";
            // Use DockStyle.Fill if this UserControl is meant to fill its container
            this.Dock = DockStyle.Fill;
            // Set a default size, DockStyle.Fill will override if applicable
            this.Size = new System.Drawing.Size(900, 700); // Adjusted size
            this.ResumeLayout(false);
        }

        private void InitializeCustomComponents()
        {
            this.SuspendLayout(); // Suspend layout

            // Use Docking for main layout panels for better resizing
            Panel mainContentPanel = new Panel { Dock = DockStyle.Fill, Padding = new Padding(20) };
            this.Controls.Add(mainContentPanel);

            // --- Bottom Panel (Legend + Pagination) ---
            Panel bottomPanel = new Panel { Dock = DockStyle.Bottom, Height = 70, BackColor = Color.Transparent };
            mainContentPanel.Controls.Add(bottomPanel);

            InitializeLegendPanel(bottomPanel); // Dock Top within bottomPanel
            InitializePaginationPanel(bottomPanel); // Dock Bottom within bottomPanel

            // --- Top Panel (Title + Controls + Metrics) ---
            Panel topPanel = new Panel { Dock = DockStyle.Top, Height = 180, BackColor = Color.Transparent };
            mainContentPanel.Controls.Add(topPanel);

            InitializeTitle(topPanel);          // Dock Top within topPanel
            InitializeControlsPanel(topPanel); // Dock Top within topPanel
            InitializeMetricsPanel(topPanel);   // Dock Top within topPanel

            // --- Middle Panel (Doctor Cards/Table) ---
            doctorCardsPanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill, // Fill remaining space
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                AutoScroll = true,
                FlowDirection = FlowDirection.TopDown, // Important for vertical list
                WrapContents = false // Important for vertical list
            };
            mainContentPanel.Controls.Add(doctorCardsPanel);
            // Ensure card panel is behind top/bottom panels if overlap occurs (unlikely with Dock)
            doctorCardsPanel.SendToBack();


            this.ResumeLayout(true); // Resume layout
        }

        #region Initialization Helpers

        private void InitializeTitle(Panel parent)
        {
            Label titleLabel = new Label
            {
                Text = "Doctor-Patient Assignments",
                Font = new Font("Segoe UI", 20, FontStyle.Bold), // Slightly smaller font
                ForeColor = ColorTranslator.FromHtml("#2C3E50"),
                Dock = DockStyle.Top, // Dock to top of its container
                Height = 40,
                Padding = new Padding(0, 0, 0, 5), // Padding at bottom
                TextAlign = ContentAlignment.MiddleLeft
                // AutoSize = false // Docking handles size
            };
            parent.Controls.Add(titleLabel);
        }

        private void InitializeControlsPanel(Panel parent)
        {
            Panel controlsPanel = new Panel
            {
                Dock = DockStyle.Top, // Dock below title
                Height = 60,         // Increased height
                BackColor = Color.White,
                // BorderStyle = BorderStyle.FixedSingle, // Optional border
                Padding = new Padding(15, 0, 15, 0) // Horizontal padding
            };

            Label departmentLabel = new Label
            {
                Text = "Department:",
                Font = new Font("Segoe UI", 12), // Adjusted font
                ForeColor = ColorTranslator.FromHtml("#2C3E50"),
                Location = new Point(15, 19), // Position within padding
                AutoSize = true
            };
            controlsPanel.Controls.Add(departmentLabel);

            departmentComboBox = new ComboBox
            {
                Font = new Font("Segoe UI", 11), // Adjusted font
                ForeColor = ColorTranslator.FromHtml("#2C3E50"),
                BackColor = ColorTranslator.FromHtml("#F8F9FA"),
                Location = new Point(departmentLabel.Right + 10, 15),
                Size = new Size(180, 30), // Wider dropdown
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            // Department options will be populated in PopulateDepartmentFilter()
            departmentComboBox.Items.Add("Loading..."); // Placeholder
            departmentComboBox.SelectedIndex = 0;
            departmentComboBox.SelectedIndexChanged += DepartmentComboBox_SelectedIndexChanged;
            controlsPanel.Controls.Add(departmentComboBox);

            // View options (aligned right)
            tableViewButton = new Button
            {
                Text = "Table",
                Font = new Font("Segoe UI", 11),
                ForeColor = ColorTranslator.FromHtml("#2C3E50"),
                BackColor = ColorTranslator.FromHtml("#F8F9FA"),
                Size = new Size(90, 32),
                FlatStyle = FlatStyle.Flat,
                Anchor = AnchorStyles.Top | AnchorStyles.Right // Anchor right
            };
            tableViewButton.FlatAppearance.BorderSize = 1;
            tableViewButton.FlatAppearance.BorderColor = ColorTranslator.FromHtml("#D1D8E0");
            RoundCorners(tableViewButton, 5);
            tableViewButton.Click += ViewButton_Click;
            tableViewButton.Location = new Point(controlsPanel.ClientSize.Width - tableViewButton.Width - 15, 14); // Position from right
            controlsPanel.Controls.Add(tableViewButton);


            graphicalViewButton = new Button
            {
                Text = "Graphical",
                Font = new Font("Segoe UI", 11),
                ForeColor = Color.White, // Selected by default
                BackColor = ColorTranslator.FromHtml("#3498DB"), // Selected by default
                Size = new Size(100, 32),
                FlatStyle = FlatStyle.Flat,
                Anchor = AnchorStyles.Top | AnchorStyles.Right // Anchor right
            };
            graphicalViewButton.FlatAppearance.BorderSize = 0;
            RoundCorners(graphicalViewButton, 5);
            graphicalViewButton.Click += ViewButton_Click;
            graphicalViewButton.Location = new Point(tableViewButton.Left - graphicalViewButton.Width - 10, 14); // Position left of Table button
            controlsPanel.Controls.Add(graphicalViewButton);


            Label viewLabel = new Label
            {
                Text = "View:",
                Font = new Font("Segoe UI", 12),
                ForeColor = ColorTranslator.FromHtml("#2C3E50"),
                AutoSize = true,
                Anchor = AnchorStyles.Top | AnchorStyles.Right // Anchor right
            };
            viewLabel.Location = new Point(graphicalViewButton.Left - viewLabel.Width - 10, 19); // Position left of Graphical button
            controlsPanel.Controls.Add(viewLabel);


            parent.Controls.Add(controlsPanel);
        }


        private void InitializeMetricsPanel(Panel parent)
        {
            metricsPanel = new Panel
            {
                Dock = DockStyle.Top, // Dock below controls
                Height = 45,         // Increased height slightly
                BackColor = ColorTranslator.FromHtml("#F8F9FA"),
                // BorderStyle = BorderStyle.FixedSingle, // Optional border
                Padding = new Padding(15) // Padding around metrics
            };

            // Using a TableLayoutPanel for even distribution might be better, but Flow works too
            FlowLayoutPanel flowMetrics = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                FlowDirection = FlowDirection.LeftToRight,
                WrapContents = false, // Prevent wrapping
                AutoScroll = true // Allow scroll if needed
            };
            metricsPanel.Controls.Add(flowMetrics);

            totalPatientsLabel = CreateMetricLabel("Total Patients: N/A");
            totalDoctorsLabel = CreateMetricLabel("Total Doctors: N/A");
            assignedPatientsLabel = CreateMetricLabel("Assigned Patients: N/A");
            specializationMatchLabel = CreateMetricLabel("Specialization Match: N/A");

            flowMetrics.Controls.Add(totalPatientsLabel);
            flowMetrics.Controls.Add(totalDoctorsLabel);
            flowMetrics.Controls.Add(assignedPatientsLabel);
            flowMetrics.Controls.Add(specializationMatchLabel);


            parent.Controls.Add(metricsPanel);
        }

        private Label CreateMetricLabel(string initialText)
        {
            return new Label
            {
                Text = initialText,
                Font = new Font("Segoe UI", 11), // Adjusted font
                ForeColor = ColorTranslator.FromHtml("#2C3E50"),
                AutoSize = true,
                Margin = new Padding(0, 5, 30, 0) // Right margin for spacing
            };
        }


        private void InitializeLegendPanel(Panel parent)
        {
            Panel legendPanel = new Panel
            {
                Dock = DockStyle.Top, // Dock top within bottom panel
                Height = 35,
                BackColor = ColorTranslator.FromHtml("#F8F9FA"),
                // BorderStyle = BorderStyle.FixedSingle, // Optional border
                Padding = new Padding(15, 0, 15, 0)
            };

            FlowLayoutPanel flowLegend = new FlowLayoutPanel { Dock = DockStyle.Fill, FlowDirection = FlowDirection.LeftToRight, Padding = new Padding(0, 5, 0, 0) };
            legendPanel.Controls.Add(flowLegend);

            Label legendTitle = new Label { Text = "Patient Urgency:", Font = new Font("Segoe UI", 10, FontStyle.Bold), AutoSize = true, Margin = new Padding(0, 2, 10, 0) };
            flowLegend.Controls.Add(legendTitle);

            flowLegend.Controls.Add(CreateLegendItem(Color.FromArgb(180, ColorTranslator.FromHtml("#E74C3C")), "High"));
            flowLegend.Controls.Add(CreateLegendItem(Color.FromArgb(180, ColorTranslator.FromHtml("#F39C12")), "Medium"));
            flowLegend.Controls.Add(CreateLegendItem(Color.FromArgb(180, ColorTranslator.FromHtml("#3498DB")), "Low"));


            parent.Controls.Add(legendPanel);
        }

        private FlowLayoutPanel CreateLegendItem(Color color, string text)
        {
            FlowLayoutPanel itemPanel = new FlowLayoutPanel { FlowDirection = FlowDirection.LeftToRight, AutoSize = true, Margin = new Padding(10, 0, 10, 0) };
            Panel circle = new Panel { Size = new Size(12, 12), BackColor = color, Margin = new Padding(0, 5, 5, 0) };
            RoundCorners(circle, 6);
            Label label = new Label { Text = text, Font = new Font("Segoe UI", 10), AutoSize = true, Margin = new Padding(0, 2, 0, 0) };
            itemPanel.Controls.Add(circle);
            itemPanel.Controls.Add(label);
            return itemPanel;
        }

        private void InitializePaginationPanel(Panel parent)
        {
            Panel paginationOuterPanel = new Panel
            {
                Dock = DockStyle.Fill, // Fill remaining space in bottom panel
                BackColor = Color.Transparent,
                Padding = new Padding(0, 2, 0, 0) // Padding above buttons
            };

            // Panel to center the buttons
            FlowLayoutPanel paginationCenteringPanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill, // Use FlowLayoutPanel for centering trick
                FlowDirection = FlowDirection.LeftToRight,
                AutoSize = true, // Allows panel to shrink/grow
                WrapContents = false
            };
            // Trick: Add panels for spacing to push buttons to center (requires parent resize handling)
            // Simpler: Fixed position panel, calculate center (less responsive)
            // Let's use FlowLayoutPanel hosted in paginationOuterPanel and manage spacing/centering manually

            // We will add buttons dynamically here

            prevButton = new Button
            {
                Text = "◀", // Simpler Text
                Font = new Font("Segoe UI", 11),
                ForeColor = ColorTranslator.FromHtml("#3498DB"),
                BackColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Size = new Size(35, 30),
                Enabled = false,
                Margin = new Padding(5, 0, 5, 0) // Margin for spacing
            };
            prevButton.FlatAppearance.BorderSize = 1;
            prevButton.FlatAppearance.BorderColor = ColorTranslator.FromHtml("#D1D8E0");
            RoundCorners(prevButton, 5);
            prevButton.Click += PrevButton_Click;


            // Panel specifically for the numeric page buttons
            paginationButtonPanel = new FlowLayoutPanel
            {
                FlowDirection = FlowDirection.LeftToRight,
                AutoSize = true, // Size itself based on buttons
                WrapContents = false,
                Margin = new Padding(0)
            };

            nextButton = new Button
            {
                Text = "▶", // Simpler Text
                Font = new Font("Segoe UI", 11),
                ForeColor = ColorTranslator.FromHtml("#3498DB"),
                BackColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Size = new Size(35, 30),
                Enabled = false,
                Margin = new Padding(5, 0, 5, 0) // Margin for spacing
            };
            nextButton.FlatAppearance.BorderSize = 1;
            nextButton.FlatAppearance.BorderColor = ColorTranslator.FromHtml("#D1D8E0");
            RoundCorners(nextButton, 5);
            nextButton.Click += NextButton_Click;

            // Add placeholder controls to the centering panel to help position buttons
            // This part needs adjustment based on how centering is achieved.
            // A common way is to handle the Resize event of paginationOuterPanel.
            paginationCenteringPanel.Resize += (s, e) => PositionPaginationControls(paginationCenteringPanel); // Handle resize

            paginationCenteringPanel.Controls.Add(prevButton);
            paginationCenteringPanel.Controls.Add(paginationButtonPanel); // Add the panel for numbers
            paginationCenteringPanel.Controls.Add(nextButton);

            paginationOuterPanel.Controls.Add(paginationCenteringPanel); // Add centering flow panel
            parent.Controls.Add(paginationOuterPanel);
        }

        // Helper to position pagination controls in the center (call on resize)
        private void PositionPaginationControls(FlowLayoutPanel centerPanel)
        {
            if (centerPanel.Parent == null || centerPanel.Parent.ClientSize.Width <= 0) return;

            // Calculate total width of visible controls within the centerPanel
            int totalWidth = 0;
            foreach (Control ctrl in centerPanel.Controls)
            {
                if (ctrl.Visible)
                {
                    totalWidth += ctrl.Width + ctrl.Margin.Horizontal;
                }
            }

            // Calculate left padding needed to center
            int padding = Math.Max(0, (centerPanel.Parent.ClientSize.Width - totalWidth) / 2);
            centerPanel.Padding = new Padding(padding, centerPanel.Padding.Top, padding, centerPanel.Padding.Bottom);
        }


        #endregion

        #region Data Loading and Handling

        // Loads initial Doctors and Patients list, populates filters
        private void LoadInitialData()
        {
            try
            {
                doctors = DataSingelton.Instance.Doctors ?? new List<Doctor>();
                patients = DataSingelton.Instance.Patients ?? new List<Patient>();

                PopulateDepartmentFilter(); // Populate filter based on loaded doctors
                UpdateMetricsWithDefaults(); // Show default metrics initially
                DisplayEmptyState();       // Show an empty state until a schedule is loaded

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading initial data: {ex.Message}", "Data Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                DisplayEmptyState("Error loading data."); // Show error state
            }
        }

        // Populates the department filter dropdown
        private void PopulateDepartmentFilter()
        {
            if (departmentComboBox == null || doctors == null) return;

            var departments = doctors.Select(d => d.Specialization)
                                    .Where(s => !string.IsNullOrWhiteSpace(s))
                                    .Distinct()
                                    .OrderBy(s => s)
                                    .ToList();

            departmentComboBox.Items.Clear();
            departmentComboBox.Items.Add("All Departments");
            departmentComboBox.Items.AddRange(departments.ToArray());

            // Try to restore previous selection or default to "All Departments"
            int selectedIndex = departments.IndexOf(selectedDepartment); // Find index in the actual list
            departmentComboBox.SelectedIndex = (selectedDepartment == "All Departments" || selectedIndex < 0) ? 0 : selectedIndex + 1; // +1 because "All" is at index 0

        }

        // Public method called externally to provide the schedule results
        public void UpdateSchedule(Schedule schedule)
        {
            currentSchedule = schedule; // Store the new schedule

            // Now that we have a schedule, update everything
            if (this.IsHandleCreated) // Ensure control is loaded before updating UI
            {
                // Re-calculate pagination based on potentially new doctor filters and schedule
                CalculatePagination();
                // Update metrics based on the new schedule
                UpdateMetrics();
                // Display the assignments from the new schedule
                DisplayAssignments();
            }
            else
            {
                // Handle case where control is not yet loaded (e.g., defer display)
                // This might happen if UpdateSchedule is called very early.
                // Consider using Load event or a flag.
                this.Load += (s, e) => {
                    CalculatePagination();
                    UpdateMetrics();
                    DisplayAssignments();
                };
            }
        }

        // Calculate total pages based on current filter
        private void CalculatePagination()
        {
            if (doctors == null) doctors = new List<Doctor>(); // Ensure not null

            var filteredDoctorCount = GetFilteredDoctors().Count();
            totalPages = (filteredDoctorCount == 0) ? 1 : (int)Math.Ceiling((double)filteredDoctorCount / doctorsPerPage);
            currentPage = Math.Max(1, Math.Min(currentPage, totalPages)); // Ensure currentPage is valid

            UpdatePaginationControls(); // Update the UI buttons
        }

        #endregion

        #region Display Logic

        // Main method to refresh the display area
        private void DisplayAssignments()
        {
            // Ensure controls are initialized and data is available
            if (doctorCardsPanel == null || doctors == null || patients == null)
            {
                DisplayEmptyState("UI controls not ready.");
                return;
            }
            ;

            // Clear current display
            doctorCardsPanel.SuspendLayout(); // Suspend layout for performance
            doctorCardsPanel.Controls.Clear();

            // Check if a schedule is loaded
            if (currentSchedule == null)
            {
                DisplayEmptyState("No schedule has been loaded or generated yet.");
                doctorCardsPanel.ResumeLayout(true);
                return;
            }


            // Get filtered doctors for the current view settings
            var filteredDoctors = GetFilteredDoctors().ToList();

            if (!filteredDoctors.Any())
            {
                DisplayEmptyState($"No doctors found for '{selectedDepartment}'.");
                doctorCardsPanel.ResumeLayout(true);
                return;
            }

            // Apply pagination to the filtered list
            int startIndex = (currentPage - 1) * doctorsPerPage;
            var pagedDoctors = filteredDoctors
                                .Skip(startIndex)
                                .Take(doctorsPerPage)
                                .ToList();

            // Display according to view preference
            if (graphicalView)
            {
                DisplayGraphicalView(pagedDoctors);
            }
            else
            {
                DisplayTableView(pagedDoctors);
            }
            doctorCardsPanel.ResumeLayout(true); // Resume layout
        }

        // Displays a message when no data or schedule is available
        private void DisplayEmptyState(string message = "No assignments to display.")
        {
            if (doctorCardsPanel == null) return;

            doctorCardsPanel.SuspendLayout();
            doctorCardsPanel.Controls.Clear();
            Label emptyLabel = new Label
            {
                Text = message,
                Font = new Font("Segoe UI", 12),
                ForeColor = Color.Gray,
                TextAlign = ContentAlignment.MiddleCenter,
                Dock = DockStyle.Fill // Fill the panel
            };
            doctorCardsPanel.Controls.Add(emptyLabel);
            doctorCardsPanel.ResumeLayout(true);
        }


        private void DisplayGraphicalView(List<Doctor> doctorsToDisplay)
        {
            // Set FlowDirection for graphical cards (can be LeftToRight with WrapContents=true for grid-like)
            // Or stick to TopDown if cards are wide. Let's assume wide cards.
            doctorCardsPanel.FlowDirection = FlowDirection.TopDown;
            doctorCardsPanel.WrapContents = false;

            foreach (var doctor in doctorsToDisplay)
            {
                // --- Create doctor card Panel ---
                Panel doctorCard = new Panel
                {
                    // Calculate width based on FlowLayoutPanel client size minus scrollbar width
                    Width = doctorCardsPanel.ClientSize.Width - (SystemInformation.VerticalScrollBarWidth + 10), // Adjust padding/margin
                    Height = 120, // Fixed height for graphical card
                    BackColor = ColorTranslator.FromHtml("#FFFFFF"), // Use White for cards
                    Margin = new Padding(5),
                    BorderStyle = BorderStyle.FixedSingle // Add border to card
                };
                // RoundCorners(doctorCard, 5); // Optional rounding

                // --- Doctor Avatar ---
                Panel avatar = new Panel { Size = new Size(40, 40), Location = new Point(15, 15), BackColor = GetDoctorColor(doctor.Specialization) };
                RoundCorners(avatar, 20); // Circular avatar
                Label avatarText = new Label { Text = "👨‍⚕️", TextAlign = ContentAlignment.MiddleCenter, ForeColor = Color.White, Font = new Font("Segoe UI Emoji", 14), Location = new Point(0, 0), Size = avatar.Size }; // Use Segoe UI Emoji
                avatar.Controls.Add(avatarText);
                doctorCard.Controls.Add(avatar);

                // --- Doctor Name & Specialization ---
                Label nameLabel = new Label { Text = doctor.Name ?? $"Dr. {doctor.Id}", Font = new Font("Segoe UI", 12, FontStyle.Bold), ForeColor = ColorTranslator.FromHtml("#2C3E50"), Location = new Point(avatar.Right + 10, 15), AutoSize = true };
                Label specializationLabel = new Label { Text = doctor.Specialization, Font = new Font("Segoe UI", 10), ForeColor = ColorTranslator.FromHtml("#7F8C8D"), Location = new Point(nameLabel.Left, nameLabel.Bottom + 2), AutoSize = true };
                doctorCard.Controls.Add(nameLabel);
                doctorCard.Controls.Add(specializationLabel);

                // --- Workload Status ---
                // TODO: Replace random status simulation with actual doctor status if available in Doctor model or Schedule
                string statusText;
                Color statusColor;
                Random random = new Random(doctor.Id + DateTime.Now.Millisecond); // Seed differently for variation if needed
                int simulatedStatus = random.Next(15); // Lower chance of leave/surgery

                // Check actual schedule first
                int assignedCount = (currentSchedule?.DoctorToPatients?.ContainsKey(doctor.Id) ?? false)
                                   ? currentSchedule.DoctorToPatients[doctor.Id].Count : 0;

                // Check if doctor has NeedsSurgery flag or similar if applicable (Assuming Doctor model has such property)
                // bool isOnLeave = doctor.IsOnLeave; // Hypothetical property
                // bool isInSurgery = doctor.IsInSurgery; // Hypothetical property

                // --- PRIORITIZE REAL DATA IF AVAILABLE ---
                // if (isOnLeave) { statusText = "ON LEAVE"; statusColor = ColorTranslator.FromHtml("#E74C3C"); }
                // else if (isInSurgery) { statusText = "SURGERY"; statusColor = ColorTranslator.FromHtml("#F39C12"); }
                if (simulatedStatus == 0) { statusText = "ON LEAVE"; statusColor = ColorTranslator.FromHtml("#E74C3C"); assignedCount = 0; } // Simulate
                else if (simulatedStatus == 1) { statusText = "SURGERY"; statusColor = ColorTranslator.FromHtml("#F39C12"); assignedCount = 0; } // Simulate
                else { statusText = $"Workload: {assignedCount}/{doctor.MaxWorkload}"; statusColor = ColorTranslator.FromHtml("#2C3E50"); }


                Label workloadLabel = new Label
                {
                    Text = statusText,
                    Font = new Font("Segoe UI", 10),
                    ForeColor = statusColor,
                    AutoSize = true,
                    Anchor = AnchorStyles.Top | AnchorStyles.Right // Anchor right
                };
                // Position anchored label
                workloadLabel.Location = new Point(doctorCard.ClientSize.Width - workloadLabel.Width - 15, 18);
                doctorCard.Controls.Add(workloadLabel);


                // --- Assigned Patients Bubbles ---
                int patientsStartY = Math.Max(avatar.Bottom, specializationLabel.Bottom) + 15; // Start below avatar/spec label
                if (statusText.StartsWith("Workload")) // Only show patients if doctor is working
                {
                    List<int> patientIds = (currentSchedule?.DoctorToPatients?.ContainsKey(doctor.Id) ?? false)
                                           ? currentSchedule.DoctorToPatients[doctor.Id] : new List<int>();
                    DisplayPatientsGraphical(doctorCard, patientIds, patientsStartY);
                }
                else // Show status message if no patients assigned due to leave/surgery
                {
                    Label noAssignmentsLabel = new Label
                    {
                        Text = statusText == "ON LEAVE" ? "On Leave - No Assignments" : (statusText == "SURGERY" ? "In Surgery - No Assignments" : "No Assigned Patients"),
                        Font = new Font("Segoe UI", 10),
                        ForeColor = Color.Gray,
                        Location = new Point(15, patientsStartY),
                        AutoSize = true
                    };
                    doctorCard.Controls.Add(noAssignmentsLabel);
                }


                doctorCardsPanel.Controls.Add(doctorCard);
            }
        }

        // Helper for graphical patient display
        private void DisplayPatientsGraphical(Panel doctorCard, List<int> patientIds, int startY)
        {
            const int maxVisiblePatients = 8; // Max bubbles per card
            const int circleDiameter = 28;
            const int spacing = 5;
            int startX = 15; // Align with avatar left edge
            //int y = startY; // Use passed startY

            var displayPatientIds = patientIds.Take(maxVisiblePatients).ToList();
            bool hasMorePatients = patientIds.Count > maxVisiblePatients;

            FlowLayoutPanel patientFlowPanel = new FlowLayoutPanel
            {
                FlowDirection = FlowDirection.LeftToRight,
                WrapContents = true, // Allow wrapping within the card width
                Location = new Point(startX, startY),
                // Calculate available width, subtract startX and right padding
                Size = new Size(doctorCard.ClientSize.Width - startX - 15, doctorCard.ClientSize.Height - startY - 10),
                //BackColor = Color.LightBlue // For debugging layout
            };


            for (int i = 0; i < displayPatientIds.Count; i++)
            {
                int patientId = displayPatientIds[i];
                var patient = patients.FirstOrDefault(p => p.Id == patientId);

                if (patient != null)
                {
                    // Use a ToolTip for hover info
                    ToolTip patientToolTip = new ToolTip();
                    string toolTipText = $"Patient ID: {patient.Id}\nName: {patient.Name ?? "N/A"}\nUrgency: {GetUrgencyText(patient.GetUrgencyValue())}\nSpecialty: {patient.RequiredSpecialization ?? "N/A"}";


                    // Patient circle Panel acts as container for circle and label
                    Panel patientBubbleContainer = new Panel { Size = new Size(circleDiameter + 2, circleDiameter + 18), Margin = new Padding(0, 0, spacing, spacing) };

                    Panel patientCircle = new Panel { Size = new Size(circleDiameter, circleDiameter), Location = new Point(1, 0), BackColor = GetUrgencyColor(patient.GetUrgencyValue()) };
                    RoundCorners(patientCircle, circleDiameter / 2);
                    patientToolTip.SetToolTip(patientCircle, toolTipText); // Add tooltip to circle

                    Label idLabel = new Label { Text = $"P{patient.Id}", TextAlign = ContentAlignment.MiddleCenter, ForeColor = Color.White, Font = new Font("Segoe UI", 8, FontStyle.Bold), Dock = DockStyle.Fill }; // Smaller font, use Dock
                    patientCircle.Controls.Add(idLabel);


                    Label urgencyLabel = new Label { Text = GetUrgencyText(patient.GetUrgencyValue()), TextAlign = ContentAlignment.MiddleCenter, ForeColor = ColorTranslator.FromHtml("#2C3E50"), Font = new Font("Segoe UI", 7), Location = new Point(0, circleDiameter + 1), Size = new Size(circleDiameter + 2, 15), AutoSize = false };
                    patientToolTip.SetToolTip(urgencyLabel, toolTipText); // Add tooltip to label too

                    patientBubbleContainer.Controls.Add(patientCircle);
                    patientBubbleContainer.Controls.Add(urgencyLabel);

                    patientFlowPanel.Controls.Add(patientBubbleContainer); // Add container to flow panel
                }
            }

            // "+X more" label if needed
            if (hasMorePatients)
            {
                Label moreLabel = new Label
                {
                    Text = $"+{patientIds.Count - maxVisiblePatients} more",
                    Font = new Font("Segoe UI", 9),
                    ForeColor = Color.Gray,
                    AutoSize = true,
                    Margin = new Padding(5, 8, 0, 0) // Adjust margin for alignment
                };
                patientFlowPanel.Controls.Add(moreLabel);
            }
            doctorCard.Controls.Add(patientFlowPanel); // Add the flow panel to the card
        }

        private void DisplayTableView(List<Doctor> doctorsToDisplay)
        {
            // Set FlowDirection for table rows
            doctorCardsPanel.FlowDirection = FlowDirection.TopDown;
            doctorCardsPanel.WrapContents = false;

            int rowWidth = doctorCardsPanel.ClientSize.Width - (SystemInformation.VerticalScrollBarWidth + 10); // Adjust for scrollbar/padding

            // --- Create Table Header ---
            Panel headerPanel = new Panel
            {
                Width = rowWidth,
                Height = 35, // Slightly taller header
                BackColor = ColorTranslator.FromHtml("#F0F0F0"), // Lighter gray header
                Margin = new Padding(0, 0, 0, 2) // Bottom margin
            };

            string[] columns = { "Doctor", "Specialization", "Workload", "Patients", "Match Rate" };
            // Adjust widths to fit better, maybe make Patients wider
            int[] columnWidths = { (int)(rowWidth * 0.30), (int)(rowWidth * 0.20), (int)(rowWidth * 0.15), (int)(rowWidth * 0.15), (int)(rowWidth * 0.15) }; // Relative widths
            int xPos = 15; // Left padding

            for (int i = 0; i < columns.Length; i++)
            {
                Label headerLabel = new Label { Text = columns[i], Font = new Font("Segoe UI", 10, FontStyle.Bold), ForeColor = ColorTranslator.FromHtml("#2C3E50"), Location = new Point(xPos, 8), AutoSize = true };
                headerPanel.Controls.Add(headerLabel);
                xPos += columnWidths[i];
            }
            doctorCardsPanel.Controls.Add(headerPanel);

            // --- Create a row for each doctor ---
            foreach (var doctor in doctorsToDisplay)
            {
                Panel rowPanel = new Panel { Width = rowWidth, Height = 40, BackColor = Color.White, Margin = new Padding(0, 0, 0, 1) }; // Thin margin between rows

                // Get patient assignments (check for null schedule)
                var patientIds = (currentSchedule?.DoctorToPatients?.ContainsKey(doctor.Id) ?? false)
                                 ? currentSchedule.DoctorToPatients[doctor.Id] : new List<int>();

                // Calculate match rate
                int matchCount = 0;
                foreach (var patientId in patientIds)
                {
                    var patient = patients.FirstOrDefault(p => p.Id == patientId); // Use loaded patients list
                    if (patient != null && patient.RequiredSpecialization == doctor.Specialization)
                    {
                        matchCount++;
                    }
                }
                double matchRate = patientIds.Count > 0 ? (double)matchCount / patientIds.Count * 100 : 0;

                // Create labels for row data
                xPos = 15; // Reset X for row
                Label nameLabel = CreateTableCellLabel(doctor.Name ?? $"Dr. {doctor.Id}", xPos, columnWidths[0]);
                xPos += columnWidths[0];
                Label specLabel = CreateTableCellLabel(doctor.Specialization, xPos, columnWidths[1]);
                xPos += columnWidths[1];
                Label workloadLabel = CreateTableCellLabel($"{patientIds.Count}/{doctor.MaxWorkload}", xPos, columnWidths[2]);
                xPos += columnWidths[2];
                Label patientCountLabel = CreateTableCellLabel(patientIds.Count.ToString(), xPos, columnWidths[3]); // Just the count
                xPos += columnWidths[3];
                Label matchLabel = CreateTableCellLabel($"{matchRate:F0}%", xPos, columnWidths[4]);


                rowPanel.Controls.Add(nameLabel);
                rowPanel.Controls.Add(specLabel);
                rowPanel.Controls.Add(workloadLabel);
                rowPanel.Controls.Add(patientCountLabel);
                rowPanel.Controls.Add(matchLabel);


                // Add divider line (optional, margin provides separation)
                rowPanel.Paint += (sender, e) => {
                    using (Pen pen = new Pen(ColorTranslator.FromHtml("#E0E0E0"))) // Lighter divider
                    {
                        // e.Graphics.DrawLine(pen, 0, rowPanel.Height - 1, rowPanel.Width, rowPanel.Height - 1); // Bottom line
                    }
                };

                doctorCardsPanel.Controls.Add(rowPanel);
            }
        }

        // Helper to create labels for table cells
        private Label CreateTableCellLabel(string text, int x, int width)
        {
            return new Label
            {
                Text = text,
                Font = new Font("Segoe UI", 10),
                ForeColor = ColorTranslator.FromHtml("#333333"),
                Location = new Point(x, 10), // Consistent vertical position
                Size = new Size(width - 10, 20), // Set fixed size for alignment, allow padding
                AutoSize = false, // Prevent auto-sizing
                TextAlign = ContentAlignment.MiddleLeft // Align text
            };
        }


        #endregion

        #region UI Updates and Event Handlers

        // Handles department selection change
        private void DepartmentComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (departmentComboBox.SelectedItem != null)
            {
                selectedDepartment = departmentComboBox.SelectedItem.ToString();
                currentPage = 1; // Reset to first page on filter change
                CalculatePagination(); // Recalculate pages based on new filter
                DisplayAssignments(); // Refresh display
            }
        }

        // Handles view button clicks (Graphical/Table)
        private void ViewButton_Click(object sender, EventArgs e)
        {
            Button clickedButton = sender as Button;
            if (clickedButton == graphicalViewButton)
            {
                graphicalView = true;
            }
            else if (clickedButton == tableViewButton)
            {
                graphicalView = false;
            }
            UpdateViewButtonStyles();
            currentPage = 1; // Reset page when changing view type
            CalculatePagination(); // Recalculate (might be same, but good practice)
            DisplayAssignments();
        }

        // Updates the styles of the view buttons based on selection
        private void UpdateViewButtonStyles()
        {
            if (graphicalView)
            {
                graphicalViewButton.BackColor = ColorTranslator.FromHtml("#3498DB");
                graphicalViewButton.ForeColor = Color.White;
                tableViewButton.BackColor = ColorTranslator.FromHtml("#F8F9FA");
                tableViewButton.ForeColor = ColorTranslator.FromHtml("#2C3E50");
            }
            else
            {
                graphicalViewButton.BackColor = ColorTranslator.FromHtml("#F8F9FA");
                graphicalViewButton.ForeColor = ColorTranslator.FromHtml("#2C3E50");
                tableViewButton.BackColor = ColorTranslator.FromHtml("#3498DB");
                tableViewButton.ForeColor = Color.White;
            }
        }

        // Updates the metrics panel based on the current schedule
        private void UpdateMetrics()
        {
            if (totalPatientsLabel == null || doctors == null || patients == null) return; // Ensure UI + data ready

            if (currentSchedule == null)
            {
                UpdateMetricsWithDefaults(); // Show N/A if no schedule
                return;
            }

            // Use locally loaded lists
            int totalPatientCount = patients.Count(p => !(p.NeedsSurgery)); // Count non-surgical patients
            int totalDoctorCount = doctors.Count;
            int assignedPatientCount = currentSchedule.PatientToDoctor?.Count ?? 0;

            // Calculate specialization match percentage
            int correctSpecializationCount = 0;
            if (currentSchedule.PatientToDoctor != null)
            {
                foreach (var pair in currentSchedule.PatientToDoctor)
                {
                    int patientId = pair.Key;
                    int doctorId = pair.Value;

                    var patient = patients.FirstOrDefault(p => p.Id == patientId);
                    var doctor = doctors.FirstOrDefault(d => d.Id == doctorId);

                    if (patient != null && doctor != null && patient.RequiredSpecialization == doctor.Specialization)
                    {
                        correctSpecializationCount++;
                    }
                }
            }

            double specializationMatchPercent = assignedPatientCount > 0 ?
                (double)correctSpecializationCount / assignedPatientCount * 100 : 0;

            // Update labels
            totalPatientsLabel.Text = $"Total Patients: {totalPatientCount}";
            totalDoctorsLabel.Text = $"Total Doctors: {totalDoctorCount}";
            assignedPatientsLabel.Text = $"Assigned Patients: {assignedPatientCount}";
            specializationMatchLabel.Text = $"Specialization Match: {specializationMatchPercent:F0}%";
        }

        // Sets metric labels to default/N/A state
        private void UpdateMetricsWithDefaults()
        {
            if (totalPatientsLabel == null) return; // Check if UI ready

            int totalPatientCount = patients.Count(p => !(p.NeedsSurgery));
            int totalDoctorCount = doctors?.Count ?? 0;

            totalPatientsLabel.Text = $"Total Patients: {totalPatientCount}";
            totalDoctorsLabel.Text = $"Total Doctors: {totalDoctorCount}";
            assignedPatientsLabel.Text = "Assigned Patients: N/A";
            specializationMatchLabel.Text = "Specialization Match: N/A";
        }

        #endregion

        #region Pagination Logic

        // Updates the pagination controls (prev/next buttons, page numbers)
        private void UpdatePaginationControls()
        {
            if (prevButton == null || nextButton == null || paginationButtonPanel == null) return; // Ensure UI ready

            // Enable/disable previous and next buttons
            prevButton.Enabled = currentPage > 1;
            prevButton.ForeColor = prevButton.Enabled ? ColorTranslator.FromHtml("#3498DB") : Color.Gray;
            nextButton.Enabled = currentPage < totalPages;
            nextButton.ForeColor = nextButton.Enabled ? ColorTranslator.FromHtml("#3498DB") : Color.Gray;

            // --- Dynamic Page Number Buttons ---
            paginationButtonPanel.SuspendLayout(); // Suspend layout
            paginationButtonPanel.Controls.Clear(); // Clear old buttons
            pageButtons.Clear(); // Clear tracking list

            const int maxPageButtonsToShow = 5; // Max number buttons (e.g., 1, 2, 3, 4, 5 or ..., 5, 6, 7, ..., 10)

            if (totalPages > 1)
            {
                // Calculate start and end page numbers to display
                int startPage = Math.Max(1, currentPage - (maxPageButtonsToShow / 2));
                int endPage = Math.Min(totalPages, startPage + maxPageButtonsToShow - 1);

                // Adjust startPage if endPage was capped and we have fewer than max buttons
                if (endPage - startPage + 1 < maxPageButtonsToShow)
                {
                    startPage = Math.Max(1, endPage - maxPageButtonsToShow + 1);
                }

                // Add "First" button if needed (...)
                // if (startPage > 1) { ... }

                // Add numeric page buttons
                for (int i = startPage; i <= endPage; i++)
                {
                    Button pageButton = new Button
                    {
                        Text = i.ToString(),
                        Font = new Font("Segoe UI", 10), // Slightly smaller font for page numbers
                        ForeColor = i == currentPage ? Color.White : ColorTranslator.FromHtml("#2C3E50"),
                        BackColor = i == currentPage ? ColorTranslator.FromHtml("#3498DB") : Color.White,
                        Size = new Size(30, 30),
                        FlatStyle = FlatStyle.Flat,
                        Tag = i,
                        Margin = new Padding(2, 0, 2, 0) // Spacing between page buttons
                    };
                    pageButton.FlatAppearance.BorderSize = 1;
                    pageButton.FlatAppearance.BorderColor = i == currentPage ? ColorTranslator.FromHtml("#3498DB") : ColorTranslator.FromHtml("#D1D8E0");
                    RoundCorners(pageButton, 5); // Slightly rounded rectangle

                    int pageNum = i; // Capture loop variable for lambda
                    pageButton.Click += (s, e) => GoToPage(pageNum);

                    paginationButtonPanel.Controls.Add(pageButton);
                    pageButtons.Add(pageButton);
                }

                // Add "Last" button if needed (...)
                // if (endPage < totalPages) { ... }
            }


            paginationButtonPanel.ResumeLayout(true); // Resume layout
                                                      // Recenter the controls after updating buttons
            if (paginationButtonPanel.Parent is FlowLayoutPanel parentFlow)
            {
                PositionPaginationControls(parentFlow);
            }

        }

        // Handles clicks on the Previous button
        private void PrevButton_Click(object sender, EventArgs e)
        {
            if (currentPage > 1)
            {
                GoToPage(currentPage - 1);
            }
        }

        // Handles clicks on the Next button
        private void NextButton_Click(object sender, EventArgs e)
        {
            if (currentPage < totalPages)
            {
                GoToPage(currentPage + 1);
            }
        }

        // Navigates to a specific page number
        private void GoToPage(int pageNumber)
        {
            if (pageNumber >= 1 && pageNumber <= totalPages && pageNumber != currentPage)
            {
                currentPage = pageNumber;
                UpdatePaginationControls(); // Update button styles immediately
                DisplayAssignments();       // Reload data for the new page
            }
            // If clicking the current page button, do nothing (or maybe refresh?)
        }

        #endregion

        #region Helpers

        // Filters the main doctors list based on the selected department
        private IEnumerable<Doctor> GetFilteredDoctors()
        {
            if (doctors == null) yield break; // Return empty if no doctors loaded

            if (selectedDepartment == "All Departments")
            {
                foreach (var doctor in doctors) yield return doctor;
            }
            else
            {
                foreach (var doctor in doctors)
                {
                    if (doctor.Specialization == selectedDepartment)
                    {
                        yield return doctor;
                    }
                }
            }
        }

        // Gets a color based on specialization (can customize)
        private Color GetDoctorColor(string specialization)
        {
            // Consistent coloring (using hash code for pseudo-random stable color)
            int hash = specialization?.GetHashCode() ?? 0;
            Random seededRandom = new Random(hash);
            // Generate colors within a pleasant range (avoid very dark/light)
            int r = seededRandom.Next(50, 200);
            int g = seededRandom.Next(50, 200);
            int b = seededRandom.Next(50, 200);
            // Slightly desaturate by adding gray component
            // r = (r + 128) / 2; g = (g + 128) / 2; b = (b + 128) / 2;
            return Color.FromArgb(200, r, g, b); // Use Alpha for slight transparency

            /* // Original Switch-based colors:
            switch (specialization?.ToLower()) // Use ToLower for case-insensitivity
            {
               case "cardiology": return Color.FromArgb(200, ColorTranslator.FromHtml("#E74C3C")); // Reddish
               case "neurology": return Color.FromArgb(200, ColorTranslator.FromHtml("#9B59B6")); // Purple
               case "orthopedics": return Color.FromArgb(200, ColorTranslator.FromHtml("#2ECC71")); // Green
               case "pediatrics": return Color.FromArgb(200, ColorTranslator.FromHtml("#1ABC9C")); // Teal
               case "oncology": return Color.FromArgb(200, ColorTranslator.FromHtml("#34495E")); // Dark Blue/Gray
               case "dermatology": return Color.FromArgb(200, ColorTranslator.FromHtml("#F39C12")); // Orange
               default: return Color.FromArgb(200, ColorTranslator.FromHtml("#7F8C8D")); // Gray
            } */
        }

        // Gets a color based on urgency value
        private Color GetUrgencyColor(int urgencyValue)
        {
            switch (urgencyValue)
            {
                case 3: return Color.FromArgb(220, ColorTranslator.FromHtml("#E74C3C")); // High - More opaque Red
                case 2: return Color.FromArgb(220, ColorTranslator.FromHtml("#F39C12")); // Medium - More opaque Orange
                case 1: default: return Color.FromArgb(220, ColorTranslator.FromHtml("#3498DB")); // Low - More opaque Blue
            }
        }

        // Gets text representation of urgency
        private string GetUrgencyText(int urgencyValue)
        {
            switch (urgencyValue)
            {
                case 3: return "High";
                case 2: return "Med"; // Short for Medium
                case 1: default: return "Low";
            }
        }

        // Rounds the corners of a control using GraphicsPath
        private void RoundCorners(Control control, int radius)
        {
            // Ensure radius is not too large for the control size
            radius = Math.Max(1, Math.Min(radius, Math.Min(control.Width / 2, control.Height / 2)));

            // Create the path only if dimensions are valid
            if (control.Width > 0 && control.Height > 0)
            {
                try
                {
                    using (GraphicsPath path = new GraphicsPath())
                    {
                        path.AddArc(0, 0, radius * 2, radius * 2, 180, 90); // Top-left
                        path.AddArc(control.Width - radius * 2, 0, radius * 2, radius * 2, 270, 90); // Top-right
                        path.AddArc(control.Width - radius * 2, control.Height - radius * 2, radius * 2, radius * 2, 0, 90); // Bottom-right
                        path.AddArc(0, control.Height - radius * 2, radius * 2, radius * 2, 90, 90); // Bottom-left
                        path.CloseFigure(); // Close the path

                        // Apply the region
                        // Check if handle created, needed if called early
                        if (control.IsHandleCreated)
                        {
                            control.Region = new Region(path);
                        }
                        else
                        {
                            // Defer region setting until handle is created
                            control.HandleCreated += (s, e) => {
                                // Re-create path and region as they might be disposed or invalid context
                                using (GraphicsPath deferredPath = new GraphicsPath())
                                {
                                    deferredPath.AddArc(0, 0, radius * 2, radius * 2, 180, 90);
                                    deferredPath.AddArc(control.Width - radius * 2, 0, radius * 2, radius * 2, 270, 90);
                                    deferredPath.AddArc(control.Width - radius * 2, control.Height - radius * 2, radius * 2, radius * 2, 0, 90);
                                    deferredPath.AddArc(0, control.Height - radius * 2, radius * 2, radius * 2, 90, 90);
                                    deferredPath.CloseFigure();
                                    control.Region = new Region(deferredPath);
                                }
                            };
                        }
                    }
                }
                catch (Exception ex)
                {
                    // Log error if path creation fails
                    Console.WriteLine($"Error creating region for {control.Name}: {ex.Message}");
                    control.Region = null; // Ensure no invalid region is set
                }
            }
            else
            {
                control.Region = null; // No region for zero-size controls
            }
        }


        #endregion

        // Optional: Load event handler if needed for tasks after handle creation
        private void AssignmentsPanel_Load(object sender, EventArgs e)
        {
            // Initial positioning of pagination controls after handle creation and potential resizing
            if (paginationButtonPanel?.Parent is FlowLayoutPanel parentFlow)
            {
                PositionPaginationControls(parentFlow);
            }
        }

    } // End Class
} // End Namespace